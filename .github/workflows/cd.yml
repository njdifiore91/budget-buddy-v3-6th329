# GitHub Actions workflow configuration for continuous deployment of the Budget Management Application.
# This workflow automates the deployment process to Google Cloud Platform, including container image building,
# infrastructure provisioning, and application deployment to Cloud Run.
name: Budget Management CD

# Define workflow triggers
on:
  workflow_run:
    workflows: ["Budget Management CI"]
    branches:
      - main
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "test"
        type: choice
        options:
          - "test"
          - "prod"
      version:
        description: "Version tag for the deployment"
        required: false
        type: string

# Define environment variables
env:
  PYTHON_VERSION: "3.11"
  TEST_PROJECT_ID: "budget-management-test"
  PROD_PROJECT_ID: "budget-management-prod"
  APP_NAME: "budget-management"
  REGION: "us-east1"
  TERRAFORM_DIR: "src/backend/deploy/terraform"

# Define jobs
jobs:
  # Job to prepare environment variables and outputs
  prepare:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      project_id: ${{ steps.set-env.outputs.project_id }}
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # actions/checkout v3
      - name: Set environment variables
        id: set-env
        run: |
          echo "environment=${{ github.event.inputs.environment || 'test' }}" >> $GITHUB_OUTPUT
          echo "project_id=${{ github.event.inputs.environment == 'prod' && env.PROD_PROJECT_ID || env.TEST_PROJECT_ID }}" >> $GITHUB_OUTPUT
      - name: Set version
        id: set-version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=v$(date +'%Y%m%d')-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

  # Job to deploy to the test environment
  deploy-test:
    if: "needs.prepare.outputs.environment == 'test'"
    runs-on: ubuntu-latest
    needs: ["prepare"]
    environment: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # actions/checkout v3
      - name: Set up Python
        uses: actions/setup-python@v4 # actions/setup-python v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1 # google-github-actions/auth v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ needs.prepare.outputs.project_id }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1 # google-github-actions/setup-gcloud v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # docker/setup-buildx-action v2
      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io
      - name: Build and push Docker image
        uses: docker/build-push-action@v4 # docker/build-push-action v4
        with:
          context: ./src/backend
          file: ./src/backend/Dockerfile
          push: true
          tags: gcr.io/${{ needs.prepare.outputs.project_id }}/${{ env.APP_NAME }}:${{ needs.prepare.outputs.version }},gcr.io/${{ needs.prepare.outputs.project_id }}/${{ env.APP_NAME }}:latest
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2 # hashicorp/setup-terraform v2
      - name: Initialize Terraform
        run: terraform init -backend-config="bucket=${{ needs.prepare.outputs.project_id }}-terraform-state" -backend-config="prefix=budget-management/test"
        working-directory: ${{ env.TERRAFORM_DIR }}
      - name: Terraform Plan
        run: terraform plan -var="project_id=${{ needs.prepare.outputs.project_id }}" -var="region=${{ env.REGION }}" -var="app_name=${{ env.APP_NAME }}" -var="container_image=gcr.io/${{ needs.prepare.outputs.project_id }}/${{ env.APP_NAME }}:${{ needs.prepare.outputs.version }}" -out=tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}
      - name: Run validation tests
        run: python src/scripts/deployment/validate_deployment.py --environment=test --project-id=${{ needs.prepare.outputs.project_id }} --region=${{ env.REGION }} --app-name=${{ env.APP_NAME }}

  # Job to deploy to the production environment
  deploy-prod:
    if: "needs.prepare.outputs.environment == 'prod'"
    runs-on: ubuntu-latest
    needs: ["prepare"]
    environment:
      name: production
      url: https://console.cloud.google.com/run/jobs/details/${{ env.REGION }}/${{ env.APP_NAME }}-job?project=${{ needs.prepare.outputs.project_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # actions/checkout v3
      - name: Set up Python
        uses: actions/setup-python@v4 # actions/setup-python v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1 # google-github-actions/auth v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ needs.prepare.outputs.project_id }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1 # google-github-actions/setup-gcloud v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # docker/setup-buildx-action v2
      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io
      - name: Build and push Docker image
        uses: docker/build-push-action@v4 # docker/build-push-action v4
        with:
          context: ./src/backend
          file: ./src/backend/Dockerfile
          push: true
          tags: gcr.io/${{ needs.prepare.outputs.project_id }}/${{ env.APP_NAME }}:${{ needs.prepare.outputs.version }},gcr.io/${{ needs.prepare.outputs.project_id }}/${{ env.APP_NAME }}:latest
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2 # hashicorp/setup-terraform v2
      - name: Initialize Terraform
        run: terraform init -backend-config="bucket=${{ needs.prepare.outputs.project_id }}-terraform-state" -backend-config="prefix=budget-management/prod"
        working-directory: ${{ env.TERRAFORM_DIR }}
      - name: Terraform Plan
        run: terraform plan -var-file="../../../infrastructure/environments/prod.tfvars" -var="container_image=gcr.io/${{ needs.prepare.outputs.project_id }}/${{ env.APP_NAME }}:${{ needs.prepare.outputs.version }}" -out=tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}
      - name: Run validation tests
        run: python src/scripts/deployment/validate_deployment.py --environment=prod --project-id=${{ needs.prepare.outputs.project_id }} --region=${{ env.REGION }} --app-name=${{ env.APP_NAME }}
      - name: Create GitHub Release
        uses: actions/github-script@v6 # actions/github-script v6
        with:
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.prepare.outputs.version }}',
              name: 'Budget Management ${{ needs.prepare.outputs.version }}',
              body: 'Production deployment of Budget Management Application version ${{ needs.prepare.outputs.version }}',
              draft: false,
              prerelease: false
            })

  # Job to notify deployment status
  notify-deployment:
    runs-on: ubuntu-latest
    needs: ["prepare", "deploy-test", "deploy-prod"]
    if: always()
    steps:
      - name: Notify deployment status
        run: echo "Deployment to ${{ needs.prepare.outputs.environment }} environment completed with status: ${{ job.status }}"
      - name: Send email notification
        if: "needs.prepare.outputs.environment == 'prod'"
        run: python src/scripts/deployment/send_deployment_notification.py --environment=prod --version=${{ needs.prepare.outputs.version }} --status=${{ job.status }}